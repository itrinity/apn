#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

ARGV << '--help' if ARGV.empty?

require 'optparse'
require 'apn'
require 'daemons'

command = ARGV.shift

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: apn [options]"

  opts.on("--cert_file=MANDATORY", "Location of the cert pem file") do |cert_file|
    options[:cert] = cert_file
  end

  opts.on("--cert_password=OPTIONAL", "Password for the cert pem file") do |cert_password|
    options[:password] = cert_password
  end

  opts.on("--redis_host=OPTIONAL", "Redis hostname") do |host|
    options[:redis_host] = host
  end

  opts.on("--redis_port=OPTIONAL", "Redis port") do |port|
    options[:redis_port] = port
  end

  opts.on("--redis_password=OPTIONAL", "Redis password") do |redis_password|
    options[:redis_password] = redis_password
  end

  opts.on("--environment=OPTIONAL", "Specify sandbox or production") do |env|
    if env == 'production'
      options[:host] = 'gateway.push.apple.com'
    else
      options[:host] = 'gateway.sandbox.push.apple.com'
    end
  end

  opts.on("--queue=OPTIONAL", "Name of the redis queue") do |queue|
    options[:queue] = queue
  end

  opts.on("--dir=OPTIONAL", "Directory to start in") do |dir|
    options[:dir] = dir
  end

  opts.on("--log_file=OPTIONAL", "Logfile to log in") do |log_file|
    options[:logfile] = log_file
  end

  opts.on('--help', 'Show help') do |help|
    puts opts
  end
end.parse!

options[:queue] ||= 'apn_queue'

pids_dir  = "tmp/pids"
log_dir   = "log"

case command
  when 'start'
    unless options[:foreground]
      Daemons.daemonize(
          :app_name => options[:queue],
          :dir_mode => :normal,
          :dir => pids_dir,
          :log_dir => log_dir,
          :backtrace => true,
          :log_output => true
      )
    end

    APN::Daemon.new(options).run!
  when 'run'
    APN::Daemon.new(options).run!
  when 'stop'
    unless options[:foreground]
      files = Daemons::PidFile.find_files(pids_dir, options[:queue])
      files.each do |file|
        pid = File.open(file) {|h| h.read}.to_i
        `kill -9 #{pid}`
      end
    end
end